#!/bin/bash

# sesh - Create isolated development session with recording
set -e

# Configuration
SESH_BASE_DIR="$HOME/sesh"
RECORDINGS_DIR="$HOME/rec"

# Session metadata (populated in main for signal handling)
SESSION_NAME=""
TMUX_SESSION_NAME=""
SESSION_COMMAND="zsh"

# Usage function
usage() {
    echo "Usage: sesh <session-name> [command] [directory]"
    echo ""
    echo "Creates or attaches to a tmux session using the given directory name and optional command."
    echo ""
    echo "Behavior:"
    echo "  - Tmux sessions are named <name>-<command> (command defaults to zsh)"
    echo "  - If tmux session exists: attach to it"
    echo "  - If directory \$HOME/sesh/<name> exists: create new tmux session there"
    echo "  - If neither exists: create directory and new tmux session"
    echo "  - Optional directory overrides the default session path"
    echo "    (defaults to $SESH_BASE_DIR/<name>)"
    echo "    - Relative paths resolve under the default session directory"
    echo ""
    echo "New sessions automatically start asciinema recording running the chosen command."
    exit 1
}

# Sanitize value for tmux session names
sanitize_tmux_component() {
    local input="$1"
    # Replace disallowed characters with dashes to keep tmux naming happy
    # printf avoids adding a newline that would otherwise become a trailing dash
    printf '%s' "$input" | tr -c '[:alnum:]._-' '-'
}

# Create necessary directories
setup_directories() {
    mkdir -p "$SESH_BASE_DIR"
    mkdir -p "$RECORDINGS_DIR"
}

# Check for required tools
check_dependencies() {
    local deps=("tmux" "asciinema")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            echo "Error: $dep is not installed or not in PATH"
            exit 1
        fi
    done
}

# Check if tmux session exists
session_exists() {
    local tmux_session_name="$1"
    tmux has-session -t "$tmux_session_name" 2>/dev/null
}

# Create new tmux session with recording
create_session() {
    local tmux_session_name="$1"
    local session_path="$2"
    local recording_file="$3"
    local base_session_name="$4"
    local session_command="$5"
    
    echo "🖥️  Creating tmux session '$tmux_session_name'..."
    printf -v asciinema_cmd "env SESH=%q asciinema rec --append %q --command %q" \
        "$base_session_name" "$recording_file" "$session_command"
    echo "🎬 Starting asciinema recording..."
    tmux new-session -d -s "$tmux_session_name" -c "$session_path" "$asciinema_cmd" || {
        echo "Error: Failed to create tmux session"
        exit 1
    }
}

# Main function
main() {
    # Check arguments
    if [ $# -lt 1 ] || [ $# -gt 3 ]; then
        echo "Error: Please provide a session name and optional command and directory"
        echo ""
        usage
    fi
    
    SESSION_NAME="$1"
    SESSION_COMMAND="${2:-zsh}"
    local custom_dir="${3:-}"

    local command_component
    command_component=$(sanitize_tmux_component "$SESSION_COMMAND")
    if [ -z "$command_component" ]; then
        command_component="cmd"
    fi
    TMUX_SESSION_NAME="${SESSION_NAME}-${command_component}"
    
    # Validate session name (tmux has restrictions)
    if [[ ! "$SESSION_NAME" =~ ^[a-zA-Z0-9._-]+$ ]]; then
        echo "Error: Session name can only contain letters, numbers, dots, underscores, and hyphens"
        exit 1
    fi
    
    echo "🚀 Setting up development session '$SESSION_NAME' using command '$SESSION_COMMAND'..."
    
    # Check dependencies
    check_dependencies
    setup_directories
    
    # Set paths
    local default_session_dir="$SESH_BASE_DIR/$SESSION_NAME"
    local sesh_path
    if [ -n "$custom_dir" ]; then
        case "$custom_dir" in
            ~)
                sesh_path="$HOME"
                ;;
            ~/*)
                sesh_path="$HOME/${custom_dir:2}"
                ;;
            /*)
                sesh_path="$custom_dir"
                ;;
            *)
                sesh_path="$default_session_dir/$custom_dir"
                ;;
        esac
    else
        sesh_path="$default_session_dir"
    fi
    local recording_file="$RECORDINGS_DIR/${SESSION_NAME}-${command_component}.cast"
    
    # Scenario 1: If tmux session already exists, attach to it
    if session_exists "$TMUX_SESSION_NAME"; then
        echo "📎 Found existing tmux session '$TMUX_SESSION_NAME'. Attaching..."
        tmux attach-session -t "$TMUX_SESSION_NAME"
        return 0
    fi
    
    # Scenario 2 & 3: Create new session
    # If directory doesn't exist, create it
    if [ ! -d "$sesh_path" ]; then
        echo "📁 Creating session directory '$sesh_path'..."
        mkdir -p "$sesh_path" || {
            echo "Error: Failed to create directory at $sesh_path"
            exit 1
        }
    else
        echo "📁 Using existing directory '$sesh_path'..."
    fi

    local resolved_sesh_path
    if ! resolved_sesh_path=$(cd "$sesh_path" 2>/dev/null && pwd); then
        echo "Error: Unable to resolve session directory at $sesh_path"
        exit 1
    fi
    sesh_path="$resolved_sesh_path"
    
    # Create tmux session with recording
    create_session "$TMUX_SESSION_NAME" "$sesh_path" "$recording_file" "$SESSION_NAME" "$SESSION_COMMAND"
    
    # Show session details
    echo "✅ Session setup complete!"
    echo ""
    echo "Session details:"
    echo "  Directory name (SESH): $SESSION_NAME"
    echo "  Tmux session: $TMUX_SESSION_NAME"
    echo "  Directory: $sesh_path"
    echo "  Recording: $recording_file"
    echo "  Command: $SESSION_COMMAND"
    echo "  Environment: SESH=$SESSION_NAME"
    echo ""
    echo "📎 Attaching to tmux session..."
    echo "   (Use 'Ctrl+B, d' to detach, 'exit' to end recording and session)"
    echo ""
    
    # Attach to the session
    tmux attach-session -t "$TMUX_SESSION_NAME"
    
    # Cleanup message (shown after detaching)
    echo ""
    echo "📋 Session '$TMUX_SESSION_NAME' detached."
    echo "   To reattach: sesh '$SESSION_NAME' '$SESSION_COMMAND'"
    echo "   To end session: tmux kill-session -t '$TMUX_SESSION_NAME'"
    echo "   Recording file: $recording_file"
    echo "   Session directory: $sesh_path"
}

# Cleanup function for interrupted sessions
cleanup_on_interrupt() {
    echo ""
    echo "🛑 Interrupt received. Cleaning up..."
    if [ -n "$1" ]; then
        tmux kill-session -t "$1" 2>/dev/null || true
    fi
    exit 130
}

# Set up interrupt handler with session name
trap 'cleanup_on_interrupt "$TMUX_SESSION_NAME"' INT

# Run main function
main "$@"
