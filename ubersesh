#!/bin/bash

# sesh - Create isolated development session with recording
set -e

# Configuration
SESH_BASE_DIR="$HOME/sesh"
RECORDINGS_DIR="$HOME/rec"

# Generate unique session name using timestamp and random string
generate_session_name() {
    local timestamp=$(date +%Y%m%dH%H)
    local random=$(grep -E '^[a-z]{3,5}$' /usr/share/dict/words | sort -R | head -1)
    local raw_session_name="${USER}-${timestamp}-${random}"
    local session_name="${raw_session_name//[:.]/-}"
    echo "$session_name"
}

# Create necessary directories
setup_directories() {
    mkdir -p "$SESH_BASE_DIR"
    mkdir -p "$RECORDINGS_DIR"
}

# Check for required tools
check_dependencies() {
    local deps=("tmux" "asciinema")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            echo "Error: $dep is not installed or not in PATH"
            exit 1
        fi
    done
}

# Main function
main() {
    echo "🚀 Setting up development session..."
    
    # Check dependencies
    check_dependencies
    setup_directories
    
    # Generate unique session name
    SESSION_NAME=$(generate_session_name)
    echo "📝 Session name: $SESSION_NAME"
    
    # Set paths
    SESH_PATH="$SESH_BASE_DIR/$SESSION_NAME"
    RECORDING_FILE="$RECORDINGS_DIR/$SESSION_NAME.cast"
    
    echo "📁 Creating session directory..."
    mkdir -p "$SESH_PATH" || {
        echo "Error: Failed to create directory at $SESH_PATH"
        exit 1
    }
    
    # Create tmux session
    echo "🖥️  Creating tmux session..."
    tmux new-session -d -s "$SESSION_NAME" -c "$SESH_PATH" || {
        echo "Error: Failed to create tmux session"
        rm -rf "$SESH_PATH" 2>/dev/null
        exit 1
    }
    
    # Export SESH environment variable in the tmux session
    tmux send-keys -t "$SESSION_NAME" "export SESH='$SESSION_NAME'" Enter
    
    # Start asciinema recording in the tmux session
    echo "🎬 Starting asciinema recording..."
    tmux send-keys -t "$SESSION_NAME" "asciinema rec '$RECORDING_FILE'" Enter
    
    # Give asciinema a moment to start
    sleep 1
    
    # Set up the environment in the tmux session
    tmux send-keys -t "$SESSION_NAME" "echo '🎉 Development session $SESSION_NAME started!'" Enter
    tmux send-keys -t "$SESSION_NAME" "printf '📁 Working in: '; pwd" Enter
    tmux send-keys -t "$SESSION_NAME" "echo '🎬 Recording to: $RECORDING_FILE'" Enter
    tmux send-keys -t "$SESSION_NAME" "echo '🔧 SESH environment variable set to: $SESH'" Enter
    tmux send-keys -t "$SESSION_NAME" "echo ''" Enter
    
    # Attach to the tmux session
    echo "✅ Session setup complete!"
    echo ""
    echo "Session details:"
    echo "  Name: $SESSION_NAME"
    echo "  Directory: $SESH_PATH"
    echo "  Recording: $RECORDING_FILE"
    echo "  Environment: SESH=$SESSION_NAME"
    echo ""
    echo "📎 Attaching to tmux session..."
    echo "   (Use 'Ctrl+B, d' to detach, 'exit' to end recording and session)"
    echo ""
    
    # Attach to the session
    tmux attach-session -t "$SESSION_NAME"
    
    # Cleanup message (shown after detaching)
    echo ""
    echo "📋 Session '$SESSION_NAME' detached."
    echo "   To reattach: tmux attach-session -t '$SESSION_NAME'"
    echo "   To end session: tmux kill-session -t '$SESSION_NAME'"
    echo "   Recording file: $RECORDING_FILE"
    echo "   Session directory: $SESH_PATH"
}

# Cleanup function for interrupted sessions
cleanup_on_interrupt() {
    echo ""
    echo "🛑 Interrupt received. Cleaning up..."
    if [ -n "$SESSION_NAME" ]; then
        tmux kill-session -t "$SESSION_NAME" 2>/dev/null || true
        if [ -d "$SESH_PATH" ]; then
            echo "🗑️  Note: Session directory $SESH_PATH has been left intact"
            echo "   Remove manually if no longer needed: rm -rf '$SESH_PATH'"
        fi
    fi
    exit 130
}

# Set up interrupt handler
trap cleanup_on_interrupt INT

# Run main function
main "$@"
