#!/bin/bash

# wt - Create git worktrees within sesh sessions
# Usage: 
#   wt [suffix]                  # Create/find worktree from current directory, optionally append suffix
#   wt                           # Create/find worktree from current directory
#   source wt [suffix]           # Create/find worktree and cd to it
#   . wt [suffix]                # Same as source wt
set -e

# Check if SESH environment variable is set
check_sesh_env() {
    if [ -z "$SESH" ]; then
        echo "Error: SESH environment variable is not set"
        echo "This script must be run within a sesh session"
        exit 1
    fi
}

# Check if we're in a git repository
check_git_repo() {
    local git_dir="${1:-$PWD}"
    
    # Save current directory
    local original_dir="$PWD"
    
    # Change to the specified directory temporarily
    if ! cd "$git_dir" 2>/dev/null; then
        echo "Error: Directory '$git_dir' does not exist or is not accessible" >&2
        exit 1
    fi
    
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        cd "$original_dir"
        echo "Error: '$git_dir' is not in a git repository" >&2
        echo "Please run this command from within a git repo" >&2
        exit 1
    fi
    
    # Return to original directory
    cd "$original_dir"
}

# Get the basename of the specified git repository
get_repo_basename() {
    local git_dir="${1:-$PWD}"
    local original_dir="$PWD"
    
    cd "$git_dir"
    local git_root=$(git rev-parse --show-toplevel)
    cd "$original_dir"
    
    basename "$git_root"
}

# Main function
main() {
    # Parse arguments
    local git_dir="$PWD"
    local suffix=""

    if [ "$#" -gt 1 ]; then
        echo "Error: Too many arguments" >&2
        echo "Usage: wt [suffix]" >&2
        exit 1
    fi

    if [ "$#" -eq 1 ]; then
        suffix="$1"
    fi

    # Check prerequisites
    check_sesh_env
    check_git_repo "$git_dir"
    
    # Get repository basename
    REPO_BASENAME=$(get_repo_basename "$git_dir")
    BRANCH_NAME="${USER}-${SESH}"
    WORKTREE_PATH="${HOME}/sesh/${SESH}/${REPO_BASENAME}-${BRANCH_NAME}"
    if [ -n "$suffix" ]; then
        WORKTREE_PATH="${WORKTREE_PATH}-${suffix}"
    fi
    
    echo "🔍 Checking for existing worktree..." >&2
    echo "   Git directory: $git_dir" >&2
    echo "   Repository: $REPO_BASENAME" >&2
    echo "   Target path: $WORKTREE_PATH" >&2
    
    # Check if directory already exists
    if [ -d "$WORKTREE_PATH" ]; then
        echo "✅ Worktree already exists:" >&2
        # Always output the path to stdout (for cd $(wt) usage)
        echo "$WORKTREE_PATH"
        
        # If sourced, also cd to the directory
        if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
            echo "📂 Changing to worktree directory..." >&2
            cd "$WORKTREE_PATH"
        fi
        exit 0
    fi
    
    # Create the worktree (from the specified git directory)
    echo "🌳 Creating git worktree..." >&2
    echo "   Branch: $BRANCH_NAME" >&2
    echo "   Path: $WORKTREE_PATH" >&2
    
    local original_dir="$PWD"
    cd "$git_dir"
    
    git worktree add -b "$BRANCH_NAME" "$WORKTREE_PATH" || {
        cd "$original_dir"
        echo "Error: Failed to create worktree" >&2
        echo "This might happen if the branch '$BRANCH_NAME' already exists" >&2
        echo "Try: git branch -D '$BRANCH_NAME' # if you want to recreate it" >&2
        exit 1
    }
    
    cd "$original_dir"
    
    echo "✅ Worktree created successfully!" >&2
    # Always output the path to stdout (for cd $(wt) usage)
    echo "$WORKTREE_PATH"
    
    # If sourced, also cd to the directory
    if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
        echo "📂 Changing to worktree directory..." >&2
        cd "$WORKTREE_PATH"
    fi
}

# Run main function
main "$@"
